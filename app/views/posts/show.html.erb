<p>
<strong>Title:</strong>
<%= @post.title %>
</p>

<p>
<strong>Content:</strong>
<%= @post.content %>
</p>

<p>
<strong>User:</strong>
<%= @post.user.first_name %>
</p>
<% if can? :update, @post %>
  <%= link_to "Edit", edit_post_path(@post) %>|
<% end %>
<%= link_to 'Back', posts_path %>
<!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
<% if @post.yt_video_id.present? %>
  <div class="video">
    <div id="player"></div>
  </div>
<% end %>
<script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
      player = new YT.Player('player', {
        height: '390',
        width: '640',
        videoId: '<%= @post.yt_video_id.split("?v=")[1] if @post.yt_video_id.present? %>',
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
    //event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
      if (event.data == YT.PlayerState.PLAYING && !done) {
        setTimeout(stopVideo, 6000);
        done = true;
      }
    }
    function stopVideo() {
      player.stopVideo();
    }
</script>
<h2>Comments</h2>
<div id="comments">
<%= render 'comments/new', post: @post %>
<div class="comment">
<%= render @comments %>
</div>
</div>
